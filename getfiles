#!/bin/bash
#==============================================================================
#TITLE:            job
#DESCRIPTION:      This script transfers files from a ftp to a smb share
#AUTHOR:           Louis Ouellet
#DATE:             2020-11-12
#VERSION:          1.1-1

#==============================================================================
# BASH SETUP
#==============================================================================

# Set Bash
set -o pipefail

# SETS LOCALE
export LC_ALL=en_US.UTF-8 > /dev/null 2>&1

# Set PATH
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/sbin

# Save Current IFS
tmpIFS=${IFS}

# Initialize Timer
SECOND=0

# Script name
scriptname=$(echo $0 | sed -e 's@.*/@@')

# Source Directory
sourceDir=$(dirname $(readlink -f $0))

# Initialize PID
echo $!>${sourceDir}/tmp/getfiles.pid

# Initialize sysERROR
sysERROR=

# Initialize canRun
canRun=true

#==============================================================================
# FORMATTING
#==============================================================================

function format(){
  # COLORS
  blackText=$(tput setaf 0)   # Black
  redText=$(tput setaf 1)     # Red
  greenText=$(tput setaf 2)   # Green
  yellowText=$(tput setaf 3)  # Yellow
  blueText=$(tput setaf 4)    # Blue
  magentaText=$(tput setaf 5) # Magenta
  cyanText=$(tput setaf 6)    # Cyan
  whiteText=$(tput setaf 7)   # White
  resetText=$(tput sgr0)      # Reset to default color

  # STYLES
  boldText=$(tput bold)
  blinkingText=$(tput blink)
  dimText=$(tput dim)
}

function clrformat(){
  # COLORS
  blackText=
  redText=
  greenText=
  yellowText=
  blueText=
  magentaText=
  cyanText=
  whiteText=
  resetText=

  # STYLES
  boldText=
  blinkingText=
  dimText=
}

#==============================================================================
# Elements
#==============================================================================

function elements(){
  # CHECK BOXES
  checkBoxGood="[${greenText}✓${resetText}]"       # Good
  checkBoxBad="[${redText}✗${resetText}]"          # Bad
  checkBoxQuestion="[${magentaText}?${resetText}]"  # Question / ?
  checkBoxInfo="[${cyanText}i${resetText}]"      # Info / i
  checkBoxOutput="[${yellowText}!${resetText}]"      # Output / !

  # Current Date & Time
  PDATE(){
    printf "[$(date '+%Y-%m-%d %H:%M:%S')]"
  }

  # Log Types
  INFO=$checkBoxInfo
  OUTPUT=$checkBoxOutput
  SUCCESS=$checkBoxGood
  ERROR=$checkBoxBad
  WARNING=$checkBoxOutput

  # Log Actions
  CHECK="[CHECK]"
  START="[START]"
  TIMED="[TIMED]"
  RUN="[ RUN ]"
  EMPT="[     ]"
  OUT="[ OUT ]"
  VAR="[ VAR ]"
}

#==============================================================================
# HELPERS
#==============================================================================

function help(){
	# Script Personalisation
	Title=""
	help_options="
	-a                     => Enable Archive Mode
                            This mode moves the transferred file in an archive folder
	-v                     => Enable Reporting Mode
	                          Input commands sent are stored in ${logFile}
	-p                     => Only update local files
  -x                     => Convert CSV files
	-e                     => Compile errors and warnings after execution
	-d                     => Set report destination email
	-r                     => Send report via email
	-c                     => Disable all formatting
	-i                     => install and configure/reconfigure service
	-u                     => uninstall service
	-f                     => Specify a FTP ex: \"ftp.domain.com username password\"
	-s                     => Specify a SMB ex: \"0.0.0.0 shareName destinationDirectory username password\"
	"
	help_functions="
	"
  if [ "$DEBUG" = "true" ]; then
    echo "Help" | dbg i s
  fi
  echo -e "
Usage: ./$scriptname [options]

Options:
$help_options
"
}

function error(){
  printf "FATAL ERROR: $1\n"
  help
  exit 0
}

function setError(){ sysERROR=true; }

function dbg(){
  if [ "$1" != "" ] && [ "$2" != "" ]; then
    case "$1" in
      info|i)
        TYPE=$INFO
        ;;
      success|s)
        TYPE=$SUCCESS
        ;;
      error|e)
        TYPE=$ERROR
        ;;
      output|o)
        TYPE=$OUTPUT
        ;;
      warning|w)
        TYPE=$WARNING
        ;;
      question|q)
        TYPE=$checkBoxQuestion
        ;;
    esac
    case "$2" in
      check|c|test|t)
        ACTION=$CHECK
        ;;
      start|s)
        ACTION=$START
        ;;
      run|r)
        ACTION=$RUN
        ;;
      empty|e)
        ACTION=$EMPT
        ;;
      output|o)
        ACTION=$OUT
        ;;
      timed|t)
        ACTION=$TIMED
        ;;
      variable|var|v)
        ACTION=$VAR
        ;;
    esac
    while read DCMD; do
      if [ "$3" != "" ]; then
        LogFile=$3
      fi
			DCMDout=$(echo $DCMD | sed -e "s/\n/ /g")
			for string in ${protect[@]};do
				DCMDout=$(echo $DCMDout | sed -e "s/$string/xxx/g")
			done
      if [ "$DEBUG" = "true" ]; then
        printf "${TYPE}$(PDATE)${ACTION} ${DCMDout}\n" | tee -a $logFile
      else
        printf "${TYPE}$(PDATE)${ACTION} ${DCMDout}\n"
      fi
    done
  else
    error "Missing Argument(s)"
  fi
}

function exec(){
  if [ "$1" != "" ]; then
    echo "exec $1" | dbg i s
    if eval $1 2>&1 | dbg o o;then
      echo "$1" | dbg s r
    else
      echo "$1" | dbg e r
      setError
    fi
  else
    error "Missing Argument(s)"
  fi
}

function pkg(){
  if [ "$1" != "" ]; then
    if [ "$DEBUG" = "true" ]; then
      echo "pkg $1" | dbg i s
    fi
    if [ $(dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
      exec "sudo apt-get update"
      exec "sudo apt-get install --fix-missing $1 -y"
    fi
  else
    error "Missing Argument(s)"
  fi
}

function send(){
  if [[ "${smtpEncryption}" == "ssl" ]]; then encryption='-S smtp-use-ssl'; fi
  if [[ "${smtpEncryption}" == "tls" ]]; then encryption='-S smtp-use-starttls'; fi
  exec "echo \"$2\" | s-nail -s \"$1\" ${encryption} -S ssl-rand-file=/tmp/mail.entropy -S smtp-auth=login -S smtp=\"smtps://${smtpHost}:${smtpPort}\" -S from=\"${msgFrom}(${msgName})\" -S smtp-auth-user=\"${smtpUser}\" -S smtp-auth-password=\"${smtpPass}\" -S ssl-verify=ignore -a \"$logFile\" ${msgTo}"
}

#==============================================================================
# SETTINGS
#==============================================================================

function protectDCMD(){
	protect=(
		$smtpHost
		$smtpPort
		$smtpUser
		$smtpPass
		$smbHost
		$(echo ${smbShare} | sed -e 's/\//\\\//g')
		$(echo ${smbDest} | sed -e 's/\//\\\//g')
		$smbUser
		$smbPass
		$ftpHost
		$ftpPort
		$ftpUser
		$ftpPass
	)
}

function import(){
	logDir=/tmp/
	logFile="${logDir}$(date +%s%N).log"
	if [ -f ${sourceDir}/settings.json ]; then
	  smtpHost=$(jq -r '.smtp.host' ${sourceDir}/settings.json)
	  smtpPort=$(jq -r '.smtp.port' ${sourceDir}/settings.json)
		smtpUser=$(jq -r '.smtp.username' ${sourceDir}/settings.json)
		smtpPass=$(jq -r '.smtp.password' ${sourceDir}/settings.json)
    smtpEncryption=$(jq -r '.smtp.encryption' ${sourceDir}/settings.json)
		msgName=$(jq -r '.report.name' ${sourceDir}/settings.json)
		msgFrom=$(jq -r '.report.from' ${sourceDir}/settings.json)
	  msgTo=$(jq -r '.report.to' ${sourceDir}/settings.json)
	  msgSend=$(jq -r '.report.send' ${sourceDir}/settings.json)
		smbHost=$(jq -r '.smb.host' ${sourceDir}/settings.json)
		smbShare=$(jq -r '.smb.share' ${sourceDir}/settings.json)
	  smbDest=$(jq -r '.smb.destination' ${sourceDir}/settings.json)
		smbUser=$(jq -r '.smb.username' ${sourceDir}/settings.json)
		smbPass=$(jq -r '.smb.password' ${sourceDir}/settings.json)
		smbVers=$(jq -r '.smb.version' ${sourceDir}/settings.json)
	  ftpHost=$(jq -r '.ftp.host' ${sourceDir}/settings.json)
		ftpPort=$(jq -r '.ftp.port' ${sourceDir}/settings.json)
		ftpUser=$(jq -r '.ftp.username' ${sourceDir}/settings.json)
		ftpPass=$(jq -r '.ftp.password' ${sourceDir}/settings.json)
		convertStatus=$(jq -r '.conversion.status' ${sourceDir}/settings.json)
		convertTransfer=$(jq -r '.conversion.transfer' ${sourceDir}/settings.json)
		updateFiles=$(jq -r '.update' ${sourceDir}/settings.json)
		frequency=$(jq -r '.frequency' ${sourceDir}/settings.json)
		ARCHIVE=$(jq -r '.archive' ${sourceDir}/settings.json)
	  logDir=$(jq -r '.logs.directory' ${sourceDir}/settings.json)
		if [ "$smtpHost" == null ]; then smtpHost=; fi
		if [ "$smtpPort" == null ]; then smtpPort=; fi
		if [ "$smtpUser" == null ]; then smtpUser=; fi
		if [ "$smtpPass" == null ]; then smtpPass=; fi
		if [ "$smtpEncryption" == null ]; then smtpEncryption=; fi
		if [ "$msgName" == null ]; then msgName=; fi
		if [ "$msgFrom" == null ]; then msgFrom=; fi
		if [ "$msgTo" == null ]; then msgTo=; fi
		if [ "$msgSend" == null ]; then msgSend=; fi
    if [ "$msgSend" == 'true' ]; then SENDrpt='true'; fi
		if [ "$smbHost" == null ]; then smbHost=; fi
		if [ "$smbShare" == null ]; then smbShare=; fi
		if [ "$smbDest" == null ]; then smbDest=; fi
		if [ "$smbUser" == null ]; then smbUser=; fi
		if [ "$smbPass" == null ]; then smbPass=; fi
		if [ "$smbVers" == null ]; then smbVers=; fi
		if [ "$ftpHost" == null ]; then ftpHost=; fi
		if [ "$ftpPort" == null ]; then ftpPort=; fi
		if [ "$ftpUser" == null ]; then ftpUser=; fi
		if [ "$ftpPass" == null ]; then ftpPass=; fi
		if [ "$convertStatus" == null ]; then convertStatus=; fi
		if [ "$convertTransfer" == null ]; then convertTransfer=; fi
		if [ "$frequency" == null ]; then frequency=0; fi
		if [ "$updateFiles" == null ]; then updateFiles=; fi
		if [ "$ARCHIVE" == null ]; then ARCHIVE=; fi
		if [ "$logDir" == null ]; then logDir='/tmp/'; fi
		logFile="${logDir}$(date +%s%N).log"
	else
		echo "Unable to retrieve ${sourceDir}/settings.json."
		echo "File not found."
		help
		exit 0
	fi
}

#==============================================================================
# FUNTIONS
#==============================================================================

function getFTP(){
	if [ "$DISPLAY" != "" ]; then
		input=$(yad --fixed --borders=15 --width=400 --form --title="FTP Settings" --separator=" " \
			--field="Host" \
			--field="Port" \
			--field="Username" \
			--field="Password" \
			"$ftpHost" \
			"$ftpPort" \
			"$ftpUser" \
			"$ftpPass" \
		)
		ftpHost=$(echo ${input} | awk '{ print $1 }')
		ftpPort=$(echo ${input} | awk '{ print $2 }')
		ftpUser=$(echo ${input} | awk '{ print $3 }')
		ftpPass=$(echo ${input} | awk '{ print $4 }')
	else
		printf "[FTP Setting]\n"
		printf "Host: "
		read ftpHost
		printf "Port: "
		read ftpPort
		printf "Username: "
		read ftpUser
		printf "Password: "
		read ftpPass
	fi
}

function getSMB(){
	if [ "$DISPLAY" != "" ]; then
		input=$(yad --fixed --borders=15 --width=400 --form --title="SMB Settings" --separator=" " \
			--field="Host" \
			--field="Share" \
			--field="Destination" \
			--field="Username" \
			--field="Password" \
			"$smbHost" \
			"$smbShare" \
			"$smbDest" \
			"$smbUser" \
			"$smbPass" \
		)
		smbHost=$(echo ${input} | awk '{ print $1 }')
		smbShare=$(echo ${input} | awk '{ print $2 }')
		smbDest=$(echo ${input} | awk '{ print $3 }')
		smbUser=$(echo ${input} | awk '{ print $4 }')
		smbPass=$(echo ${input} | awk '{ print $5 }')
	else
		printf "[SMB Setting]\n"
		printf "Host: "
		read smbHost
		printf "Share: "
		read smbShare
		printf "Destination: "
		read smbDest
		printf "Username: "
		read smbUser
		printf "Password: "
		read smbPass
	fi
}

function mountFTP(){
	if mount | grep ${sourceDir}/tmp/share/ftp > /dev/null;then
		exec "sudo umount -lf ${sourceDir}/tmp/share/ftp"
	else
		# exec "rm -vr ${sourceDir}/tmp/share/ftp"
		exec "mkdir -p ${sourceDir}/tmp/share/ftp"
	fi
  if [ "${ftpPort}" = "22" ]; then
    if [ -f "/root/.ssh/id_rsa" ]; then
      exec "sudo sshfs -o allow_other,default_permissions,IdentityFile=/root/.ssh/id_rsa ${ftpUser}@${ftpHost}:/ ${sourceDir}/tmp/share/ftp"
    fi
  else
    CMD='sudo curlftpfs'
    HEAD='ftp://'
    if [ "${DEBUG}" = "true" ]; then
      CMD="${CMD} -v"
    fi
    if [ "${ftpPort}" = "990" ]; then
      HEAD='ftps://'
    fi
    exec "${CMD} -o user='${ftpUser}:${ftpPass}' ${HEAD}${ftpHost}:${ftpPort} ${sourceDir}/tmp/share/ftp -o rw,uid=$(id -u $USER),gid=$(id -g $USER),ssl_try,no_verify_peer,tcp_nodelay,no_verify_hostname,connect_timeout=60,allow_other"
  fi
}

function mountSMB(){
	if mount | grep ${sourceDir}/tmp/share/smb > /dev/null;then
		exec "sudo umount -lf ${sourceDir}/tmp/share/smb"
	else
		# exec "rm -vr ${sourceDir}/tmp/share/smb"
		exec "mkdir -p ${sourceDir}/tmp/share/smb"
	fi
	if [ "${smbVers}" != "" ]; then
		version=",vers=${smbVers}"
	else
		version=
	fi
	exec "sudo mount -t cifs -o rw,uid=$(id -u $USER),gid=$(id -g $USER),username=${smbUser},password=${smbPass}${version} //${smbHost}/${smbShare} ${sourceDir}/tmp/share/smb"
}

function umountALL(){
	if mount | grep ${sourceDir}/tmp/share/ftp > /dev/null;then
		exec "sudo umount -lf ${sourceDir}/tmp/share/ftp"
	fi
	if mount | grep ${sourceDir}/tmp/share/smb > /dev/null;then
		exec "sudo umount -lf ${sourceDir}/tmp/share/smb"
	fi
}

function cleanTMP(){
	exec "find /tmp -type f -atime +10 -delete 2>/dev/null"
}

function start(){
	IFS=${tmpIFS}
	mountStatus='not ready'
  count=0
	while [ "$mountStatus" == "not ready" ]; do
		if mount | grep ${sourceDir}/tmp/share/ftp > /dev/null;then
			echo "${sourceDir}/tmp/share/ftp is mounted" | dbg i s
			if mount | grep ${sourceDir}/tmp/share/smb > /dev/null;then
				echo "${sourceDir}/tmp/share/smb is mounted" | dbg i s
				mountStatus='ready'
				IFS=$'\n'
				echo "Removing Unsupported Characters in Filenames" | dbg i s
				for file in $(find "${sourceDir}/tmp/share/ftp/" -noleaf -type f -name "*#*");do
					printOriginalFile=$(sed -r 's/[^0-9a-zA-Z._\/ ]/\\&/g' <<< "${file}")
					newFile=$(echo "${file}" | sed -r 's/[^0-9a-zA-Z._\/ ]//g' | sed -e 's/  / /g')
					if [ ! -f "${newFile}" ]; then
						echo "Renaming \"${printOriginalFile}\" to \"${newFile}\"" | dbg i s
						exec "mv -- \"${file}\" \"${newFile}\""
					fi
				done
				echo "Removing macOS Cache Files" | dbg i s
        exec "find ${sourceDir}/tmp/share/ftp/ -name '.DS_Store' -type f -delete"
        exec "find ${sourceDir}/tmp/share/smb/${smbDest} -name '.DS_Store' -type f -delete"
        for file in $(find "${sourceDir}/tmp/share/ftp/." -type f -not -path "*/archives/*");do
          file=$(echo ${file} | sed -e 's/\.\///g')
          pattern=$(echo ${smbDest} | sed -e 's/\//\\\//g')
          transfer=$(echo ${file} | sed -e 's/\/tmp\/share\/ftp\//\/tmp\/share\/smb\/'${pattern}'/g')
          if [ "$updateFiles" == "true" ]; then
            exec "cp -vu \"${file}\" \"${transfer}\""
          else
            exec "cp -v \"${file}\" \"${transfer}\""
          fi
          if [ "$ARCHIVE" = "true" ]; then
            exec "mkdir -p ${sourceDir}/tmp/share/ftp/archives"
            exec "mv -v \"${file}\" \"${sourceDir}/tmp/share/ftp/archives/\"."
          fi
          if [[ "${transfer}" == *".csv" ]]&&[[ "${convertStatus}" == "true" ]];then
            excel=$(echo ${transfer} | sed -r 's/(.*).csv/\1.xlsx/')
            echo "Converting ${transfer} to ${excel}" | dbg i s
  					exec "eval ${sourceDir}/csv2xlsx -infile \"${transfer}\" -outfile \"${excel}\" -columns 0-14:text,15-17:number -silent -overwrite"
            if [ "$convertTransfer" == "true" ]; then
              gift=$(echo ${file} | sed -r 's/(.*).xlsx/\1.csv/')
              if [ "$updateFiles" == "true" ]; then
                exec "cp -vu \"${excel}\" \"${gift}\""
              else
                exec "cp -v \"${excel}\" \"${gift}\""
              fi
            fi
          fi
        done
				echo "File transfer completed" | dbg i s
			else
				echo "waiting for ${sourceDir}/tmp/share/smb" | dbg i t
        count=$((count+1))
        if (( $count >= 12 )); then
          echo "Unable to mount SMB" | dbg e t
          setError
        fi
        sleep 5
			fi
		else
			echo "waiting for ${sourceDir}/tmp/share/ftp" | dbg i t
      count=$((count+1))
      if (( $count >= 12 )); then
        echo "Unable to mount FTP" | dbg e t
        setError
      fi
      sleep 5
		fi
    if (( $count >= 12 )); then
      break
      exit 0
    fi
	done
}

function main(){
	count=0
	while [ "$ftpHost" == "" ] || [ "$ftpUser" == "" ] || [ "$ftpPass" == "" ]; do
		((++count))
		if (( $count > 3 )); then exit; fi
		getFTP
	done
	count=0
	while [ "$smbHost" == "" ] || [ "$smbShare" == "" ] || [ "$smbUser" == "" ] || [ "$smbPass" == "" ]; do
		((++count))
		if (( $count > 3 )); then exit; fi
		getSMB
	done
  if [ "$SENDrpt" = "true" ] && [ "$DEBUG" != "true" ]; then
  	protectDCMD
  fi
	ftpPass=$(echo $ftpPass | sed -e 's/,/\\,/g')
	smbPass=$(echo $smbPass | sed -e 's/,/\\,/g')
	mountFTP
	mountSMB
	start
	umountALL
	cleanTMP
}

function uninstall(){
  canRun="false";
  if [ -f ${sourceDir}/settings.json ]; then
    read -p "Do you want to remove configuration file(y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      exec "rm ${sourceDir}/settings.json"
    fi
  fi
  if [ -f /etc/init.d/${name} ]; then
    exec "sudo systemctl status ${name}"
    exec "sudo systemctl stop ${name}"
    exec "sudo systemctl disable ${name}"
    exec "sudo rm /etc/init.d/${name}"
    exec "sudo systemctl daemon-reload"
  fi
}

function install(){
  canRun="false";
  name=$(echo "${sourceDir}" | sed -e 's/\///' | sed -e 's/\//-/g')"-getfiles"
  if [ ! -f /etc/init.d/${name} ]; then
    exec "sudo ln -s ${sourceDir}/init /etc/init.d/${name}"
    exec "sudo systemctl daemon-reload"
    exec "sudo systemctl enable ${name}"
    exec "sudo systemctl start ${name}"
    exec "sudo systemctl status ${name}"
  fi
  if [ -f ${sourceDir}/settings.json ]; then
    read -p "Do you want to change the configuration file(y/n)? " -n 1 -r
  else
    read -p "Do you want to create a configuration file(y/n)? " -n 1 -r
  fi
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Let's start with the FTP Server"
    host=
    while [[ "${host}" == '' ]]; do
      if [ "$ftpHost" != '' ]; then
        read -p "What is the address of the server(${ftpHost})? " -r host
        if [[ "$host" == '' ]]; then host=${ftpHost}; fi
      else
        read -p "What is the address of the server? " -r host
      fi
    done
    port=
    while [[ "${port}" == '' ]]; do
      if [ "$ftpPort" != '' ]; then
        read -p "Which port should I use(${ftpPort})? " -r myport
        if [[ "$myport" == '' ]]; then myport=${ftpPort}; fi
        if [[ $myport =~ ^-?[0-9]+$ ]]; then port=$myport; fi
      else
        read -p "Which port should I use(21)? " -r myport
        if [[ "$myport" == '' ]]; then myport=21; fi
        if [[ $myport =~ ^-?[0-9]+$ ]]; then port=$myport; fi
      fi
    done
    username=
    while [[ "${username}" == '' ]]; do
      if [ "$ftpUser" != '' ]; then
        read -p "What's the username(${ftpUser})? " -r username
        if [[ "$username" == '' ]]; then username=${ftpUser}; fi
      else
        read -p "What's the username? " -r username
      fi
    done
    password=
    while [[ "${password}" == '' ]]; do
      if [ "$ftpPass" != '' ]; then
        read -p "And what's the password(${ftpPass})? " -s -r password
        if [[ "$password" == '' ]]; then password=${ftpPass}; fi
      else
        read -p "And what's the password? " -r password
      fi
      echo
    done
    varFTP='  "ftp":{
        "host": "'${host}'",
        "port": "'${port}'",
        "username": "'${username}'",
        "password": "'${password}'"
    }'
    echo "Now let's configure the SMB share"
    host=
    while [[ "${host}" == '' ]]; do
      if [ "$smbHost" != '' ]; then
        read -p "What is the address of the server(${smbHost})? " -r host
        if [[ "$host" == '' ]]; then host=${smbHost}; fi
      else
        read -p "What is the address of the server? " -r host
      fi
    done
    share=
    while [[ "${share}" == '' ]]; do
      if [ "$smbShare" != '' ]; then
        read -p "Which shared folder should I mount(${smbShare})? " -r share
        if [[ "$share" == '' ]]; then share=${smbShare}; fi
      else
        read -p "Which shared folder should I mount? " -r share
      fi
    done
    read -p "Do you have a subfolder to transfer the files into(y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      destination=
      while [[ "${destination}" == '' ]]; do
        if [ "$smbDest" != '' ]; then
          read -p "What is it(${smbDest})? " -r destination
          if [[ "$destination" == '' ]]; then destination=${smbDest}; fi
        else
          read -p "What is it? " -r destination
        fi
      done
    fi
    read -p "Are you using an old version of SMB(y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then version='1.0'; fi
    username=
    while [[ "${username}" == '' ]]; do
      if [ "$smbUser" != '' ]; then
        read -p "What's the username(${smbUser})? " -r username
        if [[ "$username" == '' ]]; then username=${smbUser}; fi
      else
        read -p "What's the username? " -r username
      fi
    done
    password=
    while [[ "${password}" == '' ]]; do
      if [ "$smbPass" != '' ]; then
        read -p "And what's the password(${smbPass})? " -s -r password
        if [[ "$password" == '' ]]; then password=${smbPass}; fi
      else
        read -p "And what's the password? " -s -r password
      fi
      echo
    done
    varSMB='  "smb":{
        "host": "'${host}'",
        "share": "'${share}'",
        "destination": "'${destination}'",
        "username": "'${username}'",
        "password": "'${password}'",
        "version": "'${version}'"
    }'
    read -p "Do you want to enable archive mode(y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then varARCHIVE='  "archive":true'; fi
    if [ "$convertStatus" != '' ]; then
      if [ "$convertStatus" == 'true' ]; then
        read -p "Do you want to disable CSV conversion(y/n)? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then status='false'; fi
      else
        read -p "Do you want to enable CSV conversion(y/n)? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then status='true'; fi
      fi
    else
      read -p "Do you want to enable CSV conversion(y/n)? " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then status='true'; fi
    fi
    if [ "$status" == 'true' ]; then
      if [ "$convertTransfer" == 'true' ]; then
        read -p "Do you want to disable the transfer of the XLSX file(y/n)? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then transfer='false'; fi
      else
        read -p "Do you want to enable the transfer of the XLSX file(y/n)? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then transfer='true'; fi
      fi
      if [ "$transfer" == 'true' ]; then
        varCONVERSION='  "conversion":{
            "status": "'${status}'",
            "transfer": "'${transfer}'"
        }'
      else
        varCONVERSION='  "conversion":{
            "status": "'${status}'"
        }'
      fi
    fi
    read -p "Do you want to only transfer new files(y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then varUPDATE='  "update":true'; fi
    if [ "$frequency" != '' ]; then
      read -p "Do you want to change the frequency(y/n)? " -n 1 -r
    else
      read -p "Do you want to set a frequency(y/n)? " -n 1 -r
    fi
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      finalfrequency=
      while [[ "${finalfrequency}" == '' ]]; do
        if [ "$frequency" != '' ]; then
          read -p "What's the new frequency in seconds(${frequency})? " -r myfrequency
          if [[ "$myfrequency" == '' ]]; then myfrequency=${frequency}; fi
          if [[ $myfrequency =~ ^-?[0-9]+$ ]]; then finalfrequency=$myfrequency; fi
        else
          read -p "What's the new frequency in seconds(0)? " -r myport
          if [[ "$myfrequency" == '' ]]; then myfrequency=0; fi
          if [[ $myfrequency =~ ^-?[0-9]+$ ]]; then finalfrequency=$myfrequency; fi
        fi
      done
      varFREQUENCY='  "frequency":'${finalfrequency}
    fi
    if [ "$logDir" != '' ]; then
      read -p "Do you want to change the log directory(y/n)? " -n 1 -r
    else
      read -p "Do you want to set a log directory(y/n)? " -n 1 -r
    fi
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      directory=
      while [[ "${directory}" == '' ]]; do
        if [ "$logDir" != '' ]; then
          read -p "What's the new directory(${logDir})? " -r directory
          if [[ "$directory" == '' ]]; then directory=${smbHost}; fi
        else
          read -p "What's the new directory? " -r directory
        fi
      done
      if [[ "${directory: -1}" != '/' ]]; then directory="${directory}/"; fi
      varLOG='  "logs":{
          "directory": "'${directory}'"
      }'
    fi
    read -p "Do you want to enable reporting mode(y/n)? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo "We'll need a SMTP Server"
      host=
      while [[ "${host}" == '' ]]; do
        if [ "$smtpHost" != '' ]; then
          read -p "What is the address of the server(${smtpHost})? " -r host
          if [[ "$host" == '' ]]; then host=${smtpHost}; fi
        else
          read -p "What is the address of the server? " -r host
        fi
      done
      port=
      while [[ "${port}" == '' ]]; do
        if [ "$smtpPort" != '' ]; then
          read -p "Which port should I use(${smtpPort})? " -r myport
          if [[ "$myport" == '' ]]; then myport=${smtpPort}; fi
          if [[ $myport =~ ^-?[0-9]+$ ]]; then port=$myport; fi
        else
          read -p "Which port should I use(25)? " -r myport
          if [[ "$myport" == '' ]]; then myport=25; fi
          if [[ $myport =~ ^-?[0-9]+$ ]]; then port=$myport; fi
        fi
      done
      while [[ "${encryption}" != "ssl" ]]&&[[ "${encryption}" != "SSL" ]]&&[[ "${encryption}" != "tls" ]]&&[[ "${encryption}" != "TLS" ]];do
        if [ "$smtpEncryption" != '' ]; then
          read -p "What type of encryption(ssl,tls)(${smtpEncryption})? " -r encryption
          if [[ "$encryption" == '' ]]; then encryption=${smtpEncryption}; fi
        else
          read -p "What type of encryption(ssl,tls)? " -r encryption
        fi
        if [[ "${encryption}" == "ssl" ]]||[[ "${encryption}" == "SSL" ]]; then encryption='ssl'; fi
        if [[ "${encryption}" == "tls" ]]||[[ "${encryption}" == "TLS" ]]; then encryption='tls'; fi
      done
      username=
      while [[ "${username}" == '' ]]; do
        if [ "$smtpUser" != '' ]; then
          read -p "What's the username(${smtpUser})? " -r username
          if [[ "$username" == '' ]]; then username=${smtpUser}; fi
        else
          read -p "What's the username? " -r username
        fi
      done
      password=
      while [[ "${password}" == '' ]]; do
        if [ "$smtpPass" != '' ]; then
          read -p "And what's the password(${smtpPass})? " -s -r password
          if [[ "$password" == '' ]]; then password=${smtpPass}; fi
        else
          read -p "And what's the password? " -r password
        fi
        echo
      done
      varSMTP='  "smtp":{
          "host": "'${host}'",
          "port": "'${port}'",
          "encryption": "'${encryption}'",
          "username": "'${username}'",
          "password": "'${password}'"
      }'
      echo "Let's setup the report"
      name=
      while [[ "${name}" == '' ]]; do
        if [ "$msgName" != '' ]; then
          read -p "How do you want to name the report(${msgName})? " -r name
          if [[ "$name" == '' ]]; then name=${msgName}; fi
        else
          read -p "How do you want to name the report(FTP to SMB - Report)? " -r name
          if [[ "$name" == '' ]]; then name='FTP to SMB - Report'; fi
        fi
      done
      from=
      while [[ "${from}" == '' ]]; do
        if [ "$msgFrom" != '' ]; then
          read -p "Who is it coming from(${msgFrom})? " -r from
          if [[ "$from" == '' ]]; then from=${msgFrom}; fi
        else
          read -p "Who is it coming from(${username})? " -r from
          if [[ "$from" == '' ]]; then from=${username}; fi
        fi
      done
      to=
      while [[ "${to}" == '' ]]; do
        if [ "$msgTo" != '' ]; then
          read -p "Who shall I send the report to(${msgTo})? " -r to
          if [[ "$to" == '' ]]; then to=${msgTo}; fi
        else
          read -p "Who shall I send the report to? " -r to
        fi
      done
      varREPORT='  "report":{
          "name": "'${name}'",
          "from": "'${from}'",
          "to": "'${to}'",
          "send": true
      }'
    fi
    SETTINGS="{\n"
    if [[ "${varFTP}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varFTP}
    fi
    if [[ "${varSMB}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varSMB}
    fi
    if [[ "${varARCHIVE}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varARCHIVE}
    fi
    if [[ "${varFREQUENCY}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varFREQUENCY}
    fi
    if [[ "${varCONVERSION}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varCONVERSION}
    fi
    if [[ "${varUPDATE}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varUPDATE}
    fi
    if [[ "${varLOG}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varLOG}
    fi
    if [[ "${varSMTP}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varSMTP}
    fi
    if [[ "${varREPORT}" != '' ]]; then
      if [[ "${SETTINGS: -3}" != ',\n' ]]&&[[ "${SETTINGS: -3}" != '{\n' ]]; then SETTINGS="${SETTINGS},\n"; fi
      SETTINGS=${SETTINGS}${varREPORT}
    fi
    SETTINGS="${SETTINGS}\n}"
    echo -e ${SETTINGS} > settings.json
  fi
}

#==============================================================================
# RUN OPTIONS & FUNCTIONS
#==============================================================================

format
elements
pkg jq
pkg s-nail
pkg zenity
pkg yad
pkg cifs-utils
pkg curlftpfs
pkg sshfs
import

while getopts ":veapxiurcf:s:d:" opt; do
	case "${opt}"
		in
			a) ARCHIVE=true;;
			v) DEBUG=true;;
			e) ERRORrpt=true;;
			p) updateFiles=true;;
			x) convertStatus=true;;
			d) msgTo=$OPTARG;;
			r) SENDrpt=true;;
			c) clrformat;elements;;
			u) uninstall;;
			i) install;;
			f)
				set -f
				IFS=' '
				ftp=($OPTARG)
				if [ "${#ftp[@]}" = 4 ]; then
					ftpHost=${ftp[0]}
					ftpPort=${ftp[1]}
					ftpUser=${ftp[2]}
					ftpPass=${ftp[3]}
				fi
				IFS=${tmpIFS}
				;;
			s)
				set -f
				IFS=' '
				smb=($OPTARG)
				if [ "${#smb[@]}" = 5 ]; then
					smbHost=${smb[0]}
					smbShare=${smb[1]}
					smbDest=${smb[2]}
					smbUser=${smb[3]}
					smbPass=${smb[4]}
				fi
				IFS=${tmpIFS}
				;;
			\? )
				echo "Invalid option: $OPTARG" 1>&2
        help
        exit 0
				;;
			: )
				echo "Invalid option: $OPTARG requires an argument" 1>&2
        help
        exit 0
				;;
	esac
done
shift $((OPTIND -1))

#==============================================================================
# RUN SCRIPT
#==============================================================================

if [ "$canRun" == "true" ]; then
  main
  if (( $((duration / 60)) <= 0 )) && [[ "$DEBUG" != "true" ]]; then
    sleep ${frequency}
  fi
fi

if [ "$DEBUG" = "true" ]; then
    duration=$SECONDS
    echo "#############################################################" | dbg i e
    echo "log file.......: $logFile" | dbg i v
    echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed." | dbg i v
    echo "#############################################################" | dbg i e
fi

if [ "$sysERROR" = "true" ] && [ "$SENDrpt" = "true" ]; then
    send "Error during the transfer from ${ftpHost}" "Some error occured during the transfer from ${ftpHost} to ${smbHost}. See attached report."
fi

if [ "$ERRORrpt" = 'true' ]; then
    cat $logFile | egrep '✗|!'
fi

exit 0
